{{#unless editor}}
import React from 'react';
{{#if doc}}import readme from './readme.md';{{/if}}
import { useHookComponent } from 'reactium-core/sdk';

const crumbs = [
    { children: 'Parent', url: '/'},
    { children: '{{name}}' },
];

export default () => {
    const { Breadcrumbs, Element{{#if doc}}, Markdown{{/if}} } = useHookComponent('RTK');

    return (
        <Element title={<Breadcrumbs links={crumbs} />}>
            {{#if doc}}
            <Markdown value={readme} />
            {{else}}
            {{name}} Element
            {{/if}}
        </Element>
    );
};

{{else}}
import React, { useEffect } from 'react';

import Reactium, {
    __,
    useDerivedState,
    useHookComponent,
    useRefs,
} from 'reactium-core/sdk';


const jsx = `
    <div>
        Code
    </div>
`;

export default () => {
    const pref = 'rtk.{{id}}';

    const refs = useRefs();
    const { CodeEditor, Element, ComponentDemo } = useHookComponent('RTK');

    const loadedState = Reactium.Toolkit.parseAttributes(
        Reactium.Prefs.get(pref, {}),
    );

    const [state, update] = useDerivedState({
        ...loadedState,
    });

    const setState = newState => {
        if (unMounted()) return;
        update(newState);
    };

    const unMounted = () => !refs.get('container');

    useEffect(() => {
        Reactium.Prefs.set(pref, state);
    }, [Object.values(state)]);

    return (
        <Element title={__('{{name}}')} ref={elm => refs.set('container', elm)}>
            <ComponentDemo
                id='{{id}}'
                className='{{id}}-demo'
                demo={<div>Demo</div>}
                inspector={<div>Inspector</div>}
                editor={<CodeEditor value={jsx} setState={setState} />}
            />
        </Element>
    );
};
{{/unless}}
